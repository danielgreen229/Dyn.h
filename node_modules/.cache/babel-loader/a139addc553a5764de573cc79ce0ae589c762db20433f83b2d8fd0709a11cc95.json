{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  width: \"200\",\n  height: \"200\"\n};\nconst _hoisted_3 = [\"points\"];\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"circle\", {\n  cx: \"100\",\n  cy: \"100\",\n  r: \"90\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(), _createElementBlock(\"svg\", _hoisted_2, [_createElementVNode(\"polygon\", {\n    points: _ctx.points\n  }, null, 8 /* PROPS */, _hoisted_3), _hoisted_4])), _createElementVNode(\"label\", null, \"Sides: \" + _toDisplayString(_ctx.sides), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"range\",\n    min: \"3\",\n    max: \"500\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.sides = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.sides, void 0, {\n    number: true\n  }]]), _createElementVNode(\"label\", null, \"Minimum Radius: \" + _toDisplayString(_ctx.minRadius) + \"%\", 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"range\",\n    min: \"0\",\n    max: \"90\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.minRadius = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.minRadius, void 0, {\n    number: true\n  }]]), _createElementVNode(\"label\", null, \"Update Interval: \" + _toDisplayString(_ctx.updateInterval) + \" milliseconds\", 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"range\",\n    min: \"10\",\n    max: \"2000\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.updateInterval = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.updateInterval, void 0, {\n    number: true\n  }]])]);\n}","map":{"version":3,"names":["id","width","height","_createElementVNode","cx","cy","r","_createElementBlock","_hoisted_1","_hoisted_2","points","_ctx","_hoisted_3","_hoisted_4","_toDisplayString","sides","type","min","max","$event","minRadius","updateInterval"],"sources":["/Users/daniel/Desktop/portfolio/dinamic-header/src/components/dynamicState.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <svg width=\"200\" height=\"200\">\n      <polygon :points=\"points\"></polygon>\n      <circle cx=\"100\" cy=\"100\" r=\"90\"></circle>\n    </svg>\n    <label>Sides: {{ sides }}</label>\n    <input type=\"range\" min=\"3\" max=\"500\" v-model.number=\"sides\" />\n    <label>Minimum Radius: {{ minRadius }}%</label>\n    <input type=\"range\" min=\"0\" max=\"90\" v-model.number=\"minRadius\" />\n    <label>Update Interval: {{ updateInterval }} milliseconds</label>\n    <input type=\"range\" min=\"10\" max=\"2000\" v-model.number=\"updateInterval\" />\n  </div>\n</template>\n\n  \n\n<script>\nfunction valueToPoint(value, index, total) {\n  var x = 0;\n  var y = -value * 0.9;\n  var angle = ((Math.PI * 2) / total) * index;\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var tx = x * cos - y * sin + 100;\n  var ty = x * sin + y * cos + 100;\n  return { x: tx, y: ty };\n}\n\nfunction generatePoints(stats) {\n  var total = stats.length;\n  return stats\n    .map(function(stat, index) {\n      var point = valueToPoint(stat, index, total);\n      return point.x + \",\" + point.y;\n    })\n    .join(\" \");\n}\n\nexport default {\n  name: \"dynamicState\",\n  data: function() {\n    var defaultSides = 10;\n    var stats = Array.apply(null, { length: defaultSides }).map(\n      function() {\n        return 100;\n      }\n    );\n    return {\n      stats: stats,\n      points: generatePoints(stats),\n      sides: defaultSides,\n      minRadius: 50,\n      interval: null,\n      updateInterval: 500\n    };\n  },\n  watch: {\n    sides: function(newSides, oldSides) {\n      var sidesDifference = newSides - oldSides;\n      if (sidesDifference > 0) {\n        for (var i = 1; i <= sidesDifference; i++) {\n          this.stats.push(this.newRandomValue());\n        }\n      } else {\n        var absoluteSidesDifference = Math.abs(sidesDifference);\n        for (var i = 1; i <= absoluteSidesDifference; i++) {\n          this.stats.shift();\n        }\n      }\n    },\n    stats: function(newStats) {\n      TweenLite.to(this.$data, this.updateInterval / 1000, {\n        points: generatePoints(newStats)\n      });\n    },\n    updateInterval: function() {\n      this.resetInterval();\n    }\n  },\n  mounted: function() {\n    this.resetInterval();\n  },\n  methods: {\n    randomizeStats: function() {\n      var vm = this;\n      this.stats = this.stats.map(function() {\n        return vm.newRandomValue();\n      });\n    },\n    newRandomValue: function() {\n      return Math.ceil(\n        this.minRadius + Math.random() * (100 - this.minRadius)\n      );\n    },\n    resetInterval: function() {\n      var vm = this;\n      clearInterval(this.interval);\n      this.randomizeStats();\n      this.interval = setInterval(function() {\n        vm.randomizeStats();\n      }, this.updateInterval);\n    }\n  }\n}\n\n</script>\n\n\n<style>\n  svg {\n    display: block;\n  }\n  polygon {\n    fill: #41b883;\n  }\n  circle {\n    fill: transparent;\n    stroke: #35495e;\n  }\n  input[type=\"range\"] {\n    display: block;\n    width: 100%;\n    margin-bottom: 15px;\n  }\n</style>"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;EACNC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;;gCAEtBC,mBAAA,CAA0C;EAAlCC,EAAE,EAAC,KAAK;EAACC,EAAE,EAAC,KAAK;EAACC,CAAC,EAAC;;;;uBAHhCC,mBAAA,CAWM,OAXNC,UAWM,I,cAVJD,mBAAA,CAGM,OAHNE,UAGM,GAFJN,mBAAA,CAAoC;IAA1BO,MAAM,EAAEC,IAAA,CAAAD;EAAM,wBAAAE,UAAA,GACxBC,UAA0C,C,IAE5CV,mBAAA,CAAiC,eAA1B,SAAO,GAAAW,gBAAA,CAAGH,IAAA,CAAAI,KAAK,kB,gBACtBZ,mBAAA,CAA+D;IAAxDa,IAAI,EAAC,OAAO;IAACC,GAAG,EAAC,GAAG;IAACC,GAAG,EAAC,KAAK;+DAAiBP,IAAA,CAAAI,KAAK,GAAAI,MAAA;iDAALR,IAAA,CAAAI,KAAK,E;YAArB;EAAsB,E,IAC5DZ,mBAAA,CAA+C,eAAxC,kBAAgB,GAAAW,gBAAA,CAAGH,IAAA,CAAAS,SAAS,IAAG,GAAC,iB,gBACvCjB,mBAAA,CAAkE;IAA3Da,IAAI,EAAC,OAAO;IAACC,GAAG,EAAC,GAAG;IAACC,GAAG,EAAC,IAAI;+DAAiBP,IAAA,CAAAS,SAAS,GAAAD,MAAA;iDAATR,IAAA,CAAAS,SAAS,E;YAAzB;EAA0B,E,IAC/DjB,mBAAA,CAAiE,eAA1D,mBAAiB,GAAAW,gBAAA,CAAGH,IAAA,CAAAU,cAAc,IAAG,eAAa,iB,gBACzDlB,mBAAA,CAA0E;IAAnEa,IAAI,EAAC,OAAO;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,MAAM;+DAAiBP,IAAA,CAAAU,cAAc,GAAAF,MAAA;iDAAdR,IAAA,CAAAU,cAAc,E;YAA9B;EAA+B,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}