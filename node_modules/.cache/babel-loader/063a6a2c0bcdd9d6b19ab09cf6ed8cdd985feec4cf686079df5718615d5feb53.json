{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport gsap from \"gsap\";\nconst defaultSides = 10;\nconst stats = Array.apply(null, {\n  length: defaultSides\n}).map(() => 100);\nexport default {\n  data() {\n    return {\n      stats: stats,\n      points: generatePoints(stats),\n      sides: defaultSides,\n      minRadius: 50,\n      interval: null,\n      updateInterval: 500\n    };\n  },\n  watch: {\n    sides(newSides, oldSides) {\n      var sidesDifference = newSides - oldSides;\n      if (sidesDifference > 0) {\n        for (var i = 1; i <= sidesDifference; i++) {\n          this.stats.push(this.newRandomValue());\n        }\n      } else {\n        var absoluteSidesDifference = Math.abs(sidesDifference);\n        for (var i = 1; i <= absoluteSidesDifference; i++) {\n          this.stats.shift();\n        }\n      }\n    },\n    stats(newStats) {\n      gsap.to(this.$data, this.updateInterval / 1000, {\n        points: generatePoints(newStats)\n      });\n    },\n    updateInterval() {\n      this.resetInterval();\n    }\n  },\n  mounted() {\n    this.resetInterval();\n  },\n  methods: {\n    randomizeStats() {\n      var vm = this;\n      this.stats = this.stats.map(() => vm.newRandomValue());\n    },\n    newRandomValue() {\n      return Math.ceil(this.minRadius + Math.random() * (100 - this.minRadius));\n    },\n    resetInterval() {\n      var vm = this;\n      clearInterval(this.interval);\n      this.randomizeStats();\n      this.interval = setInterval(() => {\n        vm.randomizeStats();\n      }, this.updateInterval);\n    }\n  }\n};\nfunction valueToPoint(value, index, total) {\n  var x = 0;\n  var y = -value * 0.9;\n  var angle = Math.PI * 2 / total * index;\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var tx = x * cos - y * sin + 100;\n  var ty = x * sin + y * cos + 100;\n  return {\n    x: tx,\n    y: ty\n  };\n}\nfunction generatePoints(stats) {\n  var total = stats.length;\n  return stats.map(function (stat, index) {\n    var point = valueToPoint(stat, index, total);\n    return point.x + \",\" + point.y;\n  }).join(\" \");\n}","map":{"version":3,"names":["gsap","defaultSides","stats","Array","apply","length","map","data","points","generatePoints","sides","minRadius","interval","updateInterval","watch","newSides","oldSides","sidesDifference","i","push","newRandomValue","absoluteSidesDifference","Math","abs","shift","newStats","to","$data","resetInterval","mounted","methods","randomizeStats","vm","ceil","random","clearInterval","setInterval","valueToPoint","value","index","total","x","y","angle","PI","cos","sin","tx","ty","stat","point","join"],"sources":["/Users/daniel/Desktop/portfolio/dinamic-header/src/components/dynamicState.vue"],"sourcesContent":["<template>\n  <div id=\"demo\">\n  <svg width=\"200\" height=\"200\">\n    <polygon :points=\"points\"></polygon>\n    <circle cx=\"100\" cy=\"100\" r=\"90\"></circle>\n  </svg>\n  <label>Sides: {{ sides }}</label>\n  <input type=\"range\" min=\"3\" max=\"500\" v-model.number=\"sides\" />\n  <label>Minimum Radius: {{ minRadius }}%</label>\n  <input type=\"range\" min=\"0\" max=\"90\" v-model.number=\"minRadius\" />\n  <label>Update Interval: {{ updateInterval }} milliseconds</label>\n  <input type=\"range\" min=\"10\" max=\"2000\" v-model.number=\"updateInterval\" />\n</div>\n</template>\n\n  \n\n<script>\nimport gsap from \"gsap\";\n\nconst defaultSides = 10;\nconst stats = Array.apply(null, { length: defaultSides }).map(() => 100);\n\nexport default {\n  data() {\n    return {\n      stats: stats,\n      points: generatePoints(stats),\n      sides: defaultSides,\n      minRadius: 50,\n      interval: null,\n      updateInterval: 500\n    };\n  },\n  watch: {\n    sides(newSides, oldSides) {\n      var sidesDifference = newSides - oldSides;\n      if (sidesDifference > 0) {\n        for (var i = 1; i <= sidesDifference; i++) {\n          this.stats.push(this.newRandomValue());\n        }\n      } else {\n        var absoluteSidesDifference = Math.abs(sidesDifference);\n        for (var i = 1; i <= absoluteSidesDifference; i++) {\n          this.stats.shift();\n        }\n      }\n    },\n    stats(newStats) {\n      gsap.to(this.$data, this.updateInterval / 1000, {\n        points: generatePoints(newStats)\n      });\n    },\n    updateInterval() {\n      this.resetInterval();\n    }\n  },\n  mounted() {\n    this.resetInterval();\n  },\n  methods: {\n    randomizeStats() {\n      var vm = this;\n      this.stats = this.stats.map(() => vm.newRandomValue());\n    },\n    newRandomValue() {\n      return Math.ceil(this.minRadius + Math.random() * (100 - this.minRadius));\n    },\n    resetInterval() {\n      var vm = this;\n      clearInterval(this.interval);\n      this.randomizeStats();\n      this.interval = setInterval(() => {\n        vm.randomizeStats();\n      }, this.updateInterval);\n    }\n  }\n};\n\n\nfunction valueToPoint(value, index, total) {\n  var x = 0;\n  var y = -value * 0.9;\n  var angle = ((Math.PI * 2) / total) * index;\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var tx = x * cos - y * sin + 100;\n  var ty = x * sin + y * cos + 100;\n  return { x: tx, y: ty };\n}\n\nfunction generatePoints(stats) {\n  var total = stats.length;\n  return stats\n    .map(function (stat, index) {\n      var point = valueToPoint(stat, index, total);\n      return point.x + \",\" + point.y;\n    })\n    .join(\" \");\n}\n</script>\n\n\n<style>\n  svg {\n    display: block;\n  }\n  polygon {\n    fill: #41b883;\n  }\n  circle {\n    fill: transparent;\n    stroke: #35495e;\n  }\n  input[type=\"range\"] {\n    display: block;\n    width: 100%;\n    margin-bottom: 15px;\n  }\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}