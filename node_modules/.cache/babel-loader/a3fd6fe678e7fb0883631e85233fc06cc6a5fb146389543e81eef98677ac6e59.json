{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  width: \"5vw\",\n  height: \"5vw\"\n};\nconst _hoisted_2 = [\"points\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(), _createElementBlock(\"svg\", _hoisted_1, [_createElementVNode(\"polygon\", {\n    points: $data.points\n  }, null, 8 /* PROPS */, _hoisted_2)]))]);\n}","map":{"version":3,"names":["width","height","_createElementBlock","_hoisted_1","_createElementVNode","points","$data","_hoisted_2"],"sources":["/Users/daniel/Desktop/portfolio/dinamic-header/src/components/dynamicState.vue"],"sourcesContent":["<template>\n  <div>\n    <svg width=\"5vw\" height=\"5vw\">\n      <polygon :points=\"points\"></polygon>\n    </svg>\n  </div>\n</template>\n\n  \n\n<script>\nimport gsap from \"gsap\";\n\nconst defaultSides = 187;\nconst stats = Array.apply(null, { length: defaultSides }).map(() => 100);\n\nexport default {\n  data() {\n    return {\n      stats: stats,\n      points: generatePoints(stats),\n      sides: 187,\n      minRadius: 70,\n      interval: 1080,\n      updateInterval: 1000\n    };\n  },\n  watch: {\n    sides(newSides, oldSides) {\n      var sidesDifference = newSides - oldSides;\n      if (sidesDifference > 0) {\n        for (var i = 1; i <= sidesDifference; i++) {\n          this.stats.push(this.newRandomValue());\n        }\n      } else {\n        var absoluteSidesDifference = Math.abs(sidesDifference);\n        for (var j = 1; j <= absoluteSidesDifference; j++) {\n          this.stats.shift();\n        }\n      }\n    },\n    stats(newStats) {\n      gsap.to(this.$data, this.updateInterval / 1000, {\n        points: generatePoints(newStats)\n      });\n    },\n    updateInterval() {\n      this.resetInterval();\n    }\n  },\n  mounted() {\n    this.resetInterval();\n  },\n  methods: {\n    randomizeStats() {\n      var vm = this;\n      this.stats = this.stats.map(() => vm.newRandomValue());\n    },\n    newRandomValue() {\n      return Math.ceil(this.minRadius + Math.random() * (100 - this.minRadius));\n    },\n    resetInterval() {\n      var vm = this;\n      clearInterval(this.interval);\n      this.randomizeStats();\n      this.interval = setInterval(() => {\n        vm.randomizeStats();\n      }, this.updateInterval);\n    }\n  }\n};\n\n\nfunction valueToPoint(value, index, total) {\n  var x = 0;\n  var y = -value * 0.9;\n  var angle = ((Math.PI * 2) / total) * index;\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var tx = x * cos - y * sin + 100;\n  var ty = x * sin + y * cos + 100;\n  return { x: tx, y: ty };\n}\n\nfunction generatePoints(stats) {\n  var total = stats.length;\n  return stats\n    .map(function (stat, index) {\n      var point = valueToPoint(stat, index, total);\n      return point.x + \",\" + point.y;\n    })\n    .join(\" \");\n}\n</script>\n\n\n<style>\n  svg {\n    display: block;\n  }\n  polygon {\n    fill: white;\n  }\n  circle {\n    fill: transparent;\n    stroke: #35495e;\n  }\n  input[type=\"range\"] {\n    display: block;\n    width: 100%;\n    margin-bottom: 15px;\n  }\n</style>"],"mappings":";;EAESA,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;;;uBAD1BC,mBAAA,CAIM,e,cAHJA,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAoC;IAA1BC,MAAM,EAAEC,KAAA,CAAAD;EAAM,wBAAAE,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}