{"ast":null,"code":"const options = {\n  threshold: 1\n};\nconst observer = new IntersectionObserver((entries, observer) => {\n  let delay = 0;\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      setTimeout(() => {\n        entry.target.classList.add(\"enter\");\n        entry.target.classList.remove(\"before-enter\");\n      }, delay);\n      delay += 50;\n      observer.unobserve(entry.target);\n    }\n  });\n}, options);\nexport default {\n  mounted(el) {\n    el.classList.add(\"before-enter\");\n    observer.observe(el);\n  }\n};","map":{"version":3,"names":["options","threshold","observer","IntersectionObserver","entries","delay","forEach","entry","isIntersecting","setTimeout","target","classList","add","remove","unobserve","mounted","el","observe"],"sources":["/Users/daniel/Desktop/portfolio/dynH/dyn-h/src/directives/vScroll.js"],"sourcesContent":["const options = { threshold: 1 };\n\nconst observer = new IntersectionObserver((entries, observer) => {\n  let delay = 0;\n  entries.forEach((entry) => {\n    if (entry.isIntersecting) {\n      setTimeout(() => {\n        entry.target.classList.add(\"enter\");\n        entry.target.classList.remove(\"before-enter\");\n      }, delay);\n      delay += 50;\n      observer.unobserve(entry.target);\n    }\n  });\n}, options);\n\nexport default {\n  mounted(el) {\n    el.classList.add(\"before-enter\");\n    observer.observe(el);\n  },\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAG;EAAEC,SAAS,EAAE;AAAE,CAAC;AAEhC,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAC,CAACC,OAAO,EAAEF,QAAQ,KAAK;EAC/D,IAAIG,KAAK,GAAG,CAAC;EACbD,OAAO,CAACE,OAAO,CAAEC,KAAK,IAAK;IACzB,IAAIA,KAAK,CAACC,cAAc,EAAE;MACxBC,UAAU,CAAC,MAAM;QACfF,KAAK,CAACG,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,OAAO,CAAC;QACnCL,KAAK,CAACG,MAAM,CAACC,SAAS,CAACE,MAAM,CAAC,cAAc,CAAC;MAC/C,CAAC,EAAER,KAAK,CAAC;MACTA,KAAK,IAAI,EAAE;MACXH,QAAQ,CAACY,SAAS,CAACP,KAAK,CAACG,MAAM,CAAC;IAClC;EACF,CAAC,CAAC;AACJ,CAAC,EAAEV,OAAO,CAAC;AAEX,eAAe;EACbe,OAAOA,CAACC,EAAE,EAAE;IACVA,EAAE,CAACL,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC;IAChCV,QAAQ,CAACe,OAAO,CAACD,EAAE,CAAC;EACtB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}