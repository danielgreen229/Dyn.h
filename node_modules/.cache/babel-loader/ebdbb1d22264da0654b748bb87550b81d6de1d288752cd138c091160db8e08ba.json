{"ast":null,"code":"export default {\n  name: 'flow-anim',\n  methods: {},\n  mounted() {\n    setInterval(calcPaths, 9500);\n    function calcPaths(totalDur) {\n      // unset 'animated' class to body which will reset the animation\n      document.body.classList.remove('animated');\n\n      // get all SVG elements - lines and dots\n      const paths = document.querySelectorAll('.autograph__path');\n      // prepare path length variable\n      let len = 0;\n      // prepare animation delay length variable\n      let delay = 0;\n\n      // escape if no elements found\n      if (!paths.length) {\n        return false;\n      }\n\n      // set duration in seconds of animation to default if not set\n      const totalDuration = totalDur || 5;\n\n      // calculate the full path length\n      paths.forEach(path => {\n        const totalLen = path.getTotalLength();\n        len += totalLen;\n      });\n      paths.forEach(path => {\n        const pathElem = path;\n        // get current path length\n        const totalLen = path.getTotalLength();\n        // calculate current animation duration\n        const duration = totalLen / len * totalDuration;\n\n        // set animation duration and delay\n        pathElem.style.animationDuration = `${duration < 0.2 ? 0.2 : duration}s`;\n        pathElem.style.animationDelay = `${delay}s`;\n\n        // set dash array and offset to path length - this is how you hide the line\n        pathElem.setAttribute('stroke-dasharray', totalLen);\n        pathElem.setAttribute('stroke-dashoffset', totalLen);\n\n        // set delay for the next path - added .2 seconds to make it more realistic\n        delay += duration + 0.2;\n      });\n\n      // set 'animated' class to body which will start the animation\n      document.body.classList.add('animated');\n      return true;\n    }\n    calcPaths();\n  }\n};","map":{"version":3,"names":["name","methods","mounted","setInterval","calcPaths","totalDur","document","body","classList","remove","paths","querySelectorAll","len","delay","length","totalDuration","forEach","path","totalLen","getTotalLength","pathElem","duration","style","animationDuration","animationDelay","setAttribute","add"],"sources":["/Users/daniel/Desktop/portfolio/dinamic-header/src/components/animFlowers.vue"],"sourcesContent":["<script>\nexport default {\nname: 'flow-anim',\nmethods: {\n},\nmounted() {\nsetInterval(calcPaths, 9500)\n\nfunction calcPaths(totalDur) {\n// unset 'animated' class to body which will reset the animation\ndocument.body.classList.remove('animated')\n\n// get all SVG elements - lines and dots\nconst paths = document.querySelectorAll('.autograph__path')\n// prepare path length variable\nlet len = 0\n// prepare animation delay length variable\nlet delay = 0\n\n// escape if no elements found\nif (!paths.length) {\nreturn false\n}\n\n// set duration in seconds of animation to default if not set\nconst totalDuration = totalDur || 5\n\n// calculate the full path length\npaths.forEach((path) => {\nconst totalLen = path.getTotalLength()\nlen += totalLen\n})\n\npaths.forEach((path) => {\nconst pathElem = path\n// get current path length\nconst totalLen = path.getTotalLength()\n// calculate current animation duration\nconst duration = totalLen / len * totalDuration\n\n// set animation duration and delay\npathElem.style.animationDuration = `${duration < 0.2 ? 0.2 : duration}s`\npathElem.style.animationDelay = `${delay}s`\n\n// set dash array and offset to path length - this is how you hide the line\npathElem.setAttribute('stroke-dasharray', totalLen)\npathElem.setAttribute('stroke-dashoffset', totalLen)\n\n// set delay for the next path - added .2 seconds to make it more realistic\ndelay += duration + 0.2\n})\n\n// set 'animated' class to body which will start the animation\ndocument.body.classList.add('animated')\n\nreturn true\n}\n\ncalcPaths()\n}\n}\n</script>\n\n<template>\n\t<div>\n\t\t<img src=\"@/assets/imgs/obj/test.svg\"/>\n\t</div>\n</template>\n\n\n\n<style scoped>\n.autograph {\nwidth: 1200px;\n}\n\n.autograph__path {\nanimation-timing-function: linear;\nanimation-fill-mode: forwards;\n\n.animated & {\nopacity: 1;\nanimation-name: line;\n}\n}\n\n@keyframes line {\n100% {\nstroke-dashoffset: 0;\n}\n}\n</style>\n\n\n\n"],"mappings":"AACA,eAAe;EACfA,IAAI,EAAE,WAAW;EACjBC,OAAO,EAAE,CACT,CAAC;EACDC,OAAOA,CAAA,EAAG;IACVC,WAAW,CAACC,SAAS,EAAE,IAAI;IAE3B,SAASA,SAASA,CAACC,QAAQ,EAAE;MAC7B;MACAC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,UAAU;;MAEzC;MACA,MAAMC,KAAI,GAAIJ,QAAQ,CAACK,gBAAgB,CAAC,kBAAkB;MAC1D;MACA,IAAIC,GAAE,GAAI;MACV;MACA,IAAIC,KAAI,GAAI;;MAEZ;MACA,IAAI,CAACH,KAAK,CAACI,MAAM,EAAE;QACnB,OAAO,KAAI;MACX;;MAEA;MACA,MAAMC,aAAY,GAAIV,QAAO,IAAK;;MAElC;MACAK,KAAK,CAACM,OAAO,CAAEC,IAAI,IAAK;QACxB,MAAMC,QAAO,GAAID,IAAI,CAACE,cAAc,EAAC;QACrCP,GAAE,IAAKM,QAAO;MACd,CAAC;MAEDR,KAAK,CAACM,OAAO,CAAEC,IAAI,IAAK;QACxB,MAAMG,QAAO,GAAIH,IAAG;QACpB;QACA,MAAMC,QAAO,GAAID,IAAI,CAACE,cAAc,EAAC;QACrC;QACA,MAAME,QAAO,GAAIH,QAAO,GAAIN,GAAE,GAAIG,aAAY;;QAE9C;QACAK,QAAQ,CAACE,KAAK,CAACC,iBAAgB,GAAK,GAAEF,QAAO,GAAI,GAAE,GAAI,GAAE,GAAIA,QAAS,GAAC;QACvED,QAAQ,CAACE,KAAK,CAACE,cAAa,GAAK,GAAEX,KAAM,GAAC;;QAE1C;QACAO,QAAQ,CAACK,YAAY,CAAC,kBAAkB,EAAEP,QAAQ;QAClDE,QAAQ,CAACK,YAAY,CAAC,mBAAmB,EAAEP,QAAQ;;QAEnD;QACAL,KAAI,IAAKQ,QAAO,GAAI,GAAE;MACtB,CAAC;;MAED;MACAf,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACkB,GAAG,CAAC,UAAU;MAEtC,OAAO,IAAG;IACV;IAEAtB,SAAS,EAAC;EACV;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}